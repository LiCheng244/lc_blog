(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{539:function(t,s,a){"use strict";a.r(s);var n=a(6),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",[t._v("对象池使用详解")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("前言")]),t._v(" "),a("p",[t._v("在运行时进行节点的创建("),a("code",[t._v("cc.instantiate")]),t._v(")和销毁("),a("code",[t._v("node.destroy")]),t._v(")操作是非常耗费性能的，因此我们在比较复杂的场景中，通常只有在场景初始化逻辑（"),a("code",[t._v("onLoad")]),t._v("）中才会进行节点的创建，在切换场景时才会进行节点的销毁。")]),t._v(" "),a("p",[t._v("如果制作有大量敌人或子弹需要反复生成和被消灭的动作类游戏，我们要如何在游戏进行过程中随时创建和销毁节点呢？")]),t._v(" "),a("p",[t._v("这里就需要对象池的帮助了。")])]),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"一-对象池的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-对象池的概念"}},[t._v("#")]),t._v(" 一. 对象池的概念")]),t._v(" "),a("br"),t._v(" "),a("p",[t._v("对象池 就是 "),a("strong",[t._v("一组可回收的节点对象")]),t._v("，我们通过创建 "),a("code",[t._v("cc.NodePool")]),t._v(" 的实例来初始化一种节点的对象池。")]),t._v(" "),a("p",[t._v("通常当我们有多个 "),a("code",[t._v("prefab")]),t._v(" 需要实例化时，应该为每个 "),a("code",[t._v("prefab")]),t._v(" 创建一个 "),a("code",[t._v("cc.NodePool")]),t._v(" 实例。")]),t._v(" "),a("br"),t._v(" "),a("p",[a("strong",[t._v("当我们需要创建节点时:")]),t._v(" 向对象池申请一个节点，如果对象池里有空闲的可用节点，就会把节点返回给用户，用户通过 "),a("code",[t._v("node.addChild")]),t._v(" 将这个新节点加入到场景节点树中。")]),t._v(" "),a("p",[a("strong",[t._v("当我们需要销毁节点时:")]),t._v(" 调用对象池实例的 "),a("code",[t._v("put(node)")]),t._v(" 方法，传入需要销毁的节点实例，对象池会自动完成把节点从场景节点树中移除的操作，然后返回给对象池。")]),t._v(" "),a("p",[t._v("这样就实现了少数节点的循环利用。")]),t._v(" "),a("br"),t._v(" "),a("p",[t._v("假如玩家在一关中要杀死 100 个敌人，但同时出现的敌人不超过 5 个，那我们就只需要生成 5 个节点大小的对象池，然后循环使用就可以了。")]),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"二-代码实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-代码实现"}},[t._v("#")]),t._v(" 二. 代码实现")]),t._v(" "),a("h3",{attrs:{id:"_1-初始化对象池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-初始化对象池"}},[t._v("#")]),t._v(" 1. 初始化对象池")]),t._v(" "),a("p",[t._v("一般在 onLoad 时 将对象池初始化好：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onLoad")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("enemyPool "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("cc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("NodePool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'poolName'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" initCount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" initCount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" enemy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("instantiate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("enemyPrefab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建节点")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("enemyPool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("enemy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过 put 接口放入对象池")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("对象池里需要的初始节点数量可以根据游戏的需要来控制，即使我们对初始节点数量的预估不准确也不要紧，后面我们会进行处理。")]),t._v(" "),a("h3",{attrs:{id:"_2-从对象池请求对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-从对象池请求对象"}},[t._v("#")]),t._v(" 2. 从对象池请求对象")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createEnemy")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("parentNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" enemy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过 size 接口判断对象池中是否有空闲的对象")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("enemyPool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象池中有对象，直接取出")]),t._v("\n\t\tenemy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("enemyPool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 没有空闲对象（对象池中备用对象不够时），我们就用 cc.instantiate 重新创建")]),t._v("\n\t\tenemy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("instantiate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("enemyPrefab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n\tenemy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" parentNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将生成的敌人加入节点树")]),t._v("\n\tenemy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getComponent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("‘Enemy’"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//接下来就可以调用 enemy 身上的脚本进行初始化")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("安全使用对象池的要点就是在 "),a("code",[t._v("get")]),t._v(" 获取对象之前，永远都要先用 "),a("code",[t._v("size")]),t._v(" 来判断是否有可用的对象，如果没有就使用正常创建节点的方法。虽然会消耗一些运行时性能，但总比游戏崩溃要好！")]),t._v(" "),a("p",[t._v("另一个选择是直接调用 "),a("code",[t._v("get")]),t._v("，如果对象池里没有可用的节点，会返回 null，在这一步进行判断也可以。")]),t._v(" "),a("h3",{attrs:{id:"_3-将对象返回对象池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-将对象返回对象池"}},[t._v("#")]),t._v(" 3. 将对象返回对象池")]),t._v(" "),a("p",[t._v("当我们不在需要使用当前节点时，需要将节点退还给对象池，以备之后继续循环利用，我们用这样的方法：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 和初始化时的方法一样，将节点放进对象池，这个方法会同时调用节点的 removeFromParent")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("enemyPool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"_4-清除对象池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-清除对象池"}},[t._v("#")]),t._v(" 4. 清除对象池")]),t._v(" "),a("p",[t._v("如果对象池中的节点不再被需要，我们可以手动清空对象池，销毁其中缓存的所有节点：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("clear () {\n\t// 调用这个方法就可以清空对象池\n\tthis.enemyPool.clear(); \n}\n")])])]),a("p",[t._v("当对象池实例不再被任何地方引用时，引擎的垃圾回收系统会自动对对象池中的节点进行销毁和回收。")]),t._v(" "),a("p",[a("strong",[t._v("但这个过程的时间点不可控，另外如果其中的节点有被其他地方所引用，也可能会导致内存泄露，所以最好在切换场景或其他不再需要对象池的时候手动调用 clear 方法来清空缓存节点。")])]),t._v(" "),a("h3",{attrs:{id:"_5-事件监听"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-事件监听"}},[t._v("#")]),t._v(" 5. 事件监听")]),t._v(" "),a("p",[t._v("创建对象池时， "),a("code",[t._v("cc.NodePool")]),t._v(" 传入 节点名称 ：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" enemyPool "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("cc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("NodePool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("‘EnemyItem’"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("当使用 "),a("code",[t._v("enemyPool.get()")]),t._v(" 获取节点后，就会调用 "),a("code",[t._v("EnemyItem.js")]),t._v(" 里的 "),a("code",[t._v("reuse")]),t._v(" 方法。")]),t._v(" "),a("p",[t._v("当使用 "),a("code",[t._v("enemyPool.put(node)")]),t._v(" 回收节点后，会调用 "),a("code",[t._v("EnemyItem.js")]),t._v(" 里的 "),a("code",[t._v("unuse")]),t._v(" 方法。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// EnemyItem.js")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reuse")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'获取节点时触发：'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unuse")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'回收节点时触发'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n")])])]),a("br"),t._v(" "),a("p",[t._v("另外 "),a("code",[t._v("cc.NodePool.get()")]),t._v(" 可以传入任意类型的参数，这些参数会被原样传递给 "),a("code",[t._v("reuse")]),t._v(" 方法。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 传入字符串参数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" enemy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("enemyPool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'name'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// EnemyItem.js")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reuse")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'获得的参数：'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("br"),t._v(" "),a("p",[t._v("这样我们就完成了一个完整的循环！将节点放入和从对象池取出的操作不会带来额外的内存管理开销，因此只要是可能，应该尽量去利用。")]),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"三-优势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-优势"}},[t._v("#")]),t._v(" 三. 优势")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("cc.NodePool")]),t._v(" 除了可以创建多个对象池实例，同一个 "),a("code",[t._v("prefab")]),t._v(" 也可以创建多个对象池，每个对象池中用不同参数进行初始化，大大增强了灵活性；")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("cc.NodePool")]),t._v(" 针对节点事件注册系统进行了优化，用户可以根据自己的需要自由的在节点回收和复用的生命周期里进行事件的注册和销毁。而之前的 cc.pool 接口是一个单例，无法正确处理节点回收和复用时的事件注册。不再推荐使用。")])]),t._v(" "),a("li",[a("p",[t._v("对象池的基本功能其实非常简单，就是使用数组来保存已经创建的节点实例列表。")])])]),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"四-注意"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四-注意"}},[t._v("#")]),t._v(" 四. 注意")]),t._v(" "),a("p",[t._v("使用对象池回收时，会将节点原封不动的回收到对象池中，下一次再取出时，仍然保持回收的状态；")]),t._v(" "),a("p",[t._v("例如： 放回对象池时：节点的透明度为：200, 那么下次取出时， 仍然是 200；")]),t._v(" "),a("p",[a("strong",[t._v("我们要在 合适的时机("),a("code",[t._v("reuse")]),t._v(" 或 "),a("code",[t._v("unuse")]),t._v(" 时) 对节点进行 初始化操作。")])]),t._v(" "),a("br")])}),[],!1,null,null,null);s.default=e.exports}}]);