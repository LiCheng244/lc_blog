(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{259:function(t,s,a){t.exports=a.p+"assets/img/19010111.565c9426.png"},260:function(t,s,a){t.exports=a.p+"assets/img/19010112.67ee1f53.png"},429:function(t,s,a){"use strict";a.r(s);var n=a(6),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",[t._v("关于 runtime 的使用")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("引言:")]),t._v(" "),n("ol",[n("li",[t._v("是一种面向对象编程语言的运行环境，类似 java 的虚拟机。")]),t._v(" "),n("li",[t._v("C语言，函数的调用在编译的时候会决定调用哪个函数。")]),t._v(" "),n("li",[t._v("OC 在编译的时候并不能决定真正调用哪个函数，只有在真正运行的时候才会根据函数的名称找到对应的函数来调用。")]),t._v(" "),n("li",[t._v("程序启动时首先加载运行时（start），它是 OC 的核心，OC 的底层， OC是基于运行时的。")]),t._v(" "),n("li",[t._v("运行的时候将 "),n("code",[t._v("oc代码转换成runtime方式， 通过runtime底层的消息机制来运行， 将结果反馈到页面上来展示.")])])])]),t._v(" "),n("br"),t._v(" "),n("h2",{attrs:{id:"一-发送消息"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-发送消息"}},[t._v("#")]),t._v(" 一. 发送消息")]),t._v(" "),n("h3",{attrs:{id:"_1-用途："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-用途："}},[t._v("#")]),t._v(" 1. 用途：")]),t._v(" "),n("ol",[n("li",[t._v("方法调用的本质，就是让对象发送消息。")]),t._v(" "),n("li",[t._v("objc_msgSend,只有对象才能发送消息，因此以 objc 开头。")]),t._v(" "),n("li",[t._v("使用消息机制，必须导入"),n("code",[t._v("#import <objc/message.h>")])])]),t._v(" "),n("h3",{attrs:{id:"_2-发送消息："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-发送消息："}},[t._v("#")]),t._v(" 2. 发送消息：")]),t._v(" "),n("div",{staticClass:"language-objectivec extra-class"},[n("pre",{pre:!0,attrs:{class:"language-objectivec"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 本质：让对象发送消息")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("objc_msgSend")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@selector")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("eat"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用类名调用类方法，底层会自动把类名转换成类对象调用")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("objc_msgSend")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Person class"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@selector")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("eat"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("br"),t._v(" "),n("h2",{attrs:{id:"二-给分类添加属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-给分类添加属性"}},[t._v("#")]),t._v(" 二. 给分类添加属性")]),t._v(" "),n("h3",{attrs:{id:"_1-用途：-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-用途：-2"}},[t._v("#")]),t._v(" 1. 用途：")]),t._v(" "),n("p",[n("strong",[t._v("最多的用在分类中：")])]),t._v(" "),n("ul",[n("li",[t._v("给分类动态添加属性，分类默认是不允许添加属性的， 能做到更好的解耦, 简化使用。")]),t._v(" "),n("li",[t._v("给一个类声明属性，其实本质就是给这个类添加关联，并不是直接把这个值的内存空间添加到内存空间。")]),t._v(" "),n("li",[t._v("SDWebImage 分类里用到过。")])]),t._v(" "),n("h3",{attrs:{id:"_2-方法："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-方法："}},[t._v("#")]),t._v(" 2. 方法：")]),t._v(" "),n("p",[n("strong",[t._v("1.利用关联对象 获取属性：")])]),t._v(" "),n("p",[t._v("在调用运行时之前 从 关联对象 中获取对象属性，判断是否已经取到属性，如果取到直接返回。")]),t._v(" "),n("div",{staticClass:"language-objectivec extra-class"},[n("pre",{pre:!0,attrs:{class:"language-objectivec"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("name\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据关联的key，获取关联的值")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("objc_getAssociatedObject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 参数1: 对象， 参数2: 动态属性的 key")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("strong",[t._v("2. 利用关联对象，将获取到的属性动态添加：")])]),t._v(" "),n("div",{staticClass:"language-objectivec extra-class"},[n("pre",{pre:!0,attrs:{class:"language-objectivec"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 利用关联对象 动态添加属性")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("setName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("name\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("objc_setAssociatedObject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" OBJC_ASSOCIATION_RETAIN_NONATOMIC"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 参数1: 给哪个对象添加关联 self")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 参数2: 动态添加属性的 key, 获取值的时候使用")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 参数3: 动态添加的属性值")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 参数4: 对象的引用关系")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("br"),t._v(" "),n("h2",{attrs:{id:"三-动态获取类的属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三-动态获取类的属性"}},[t._v("#")]),t._v(" 三. 动态获取类的属性")]),t._v(" "),n("h3",{attrs:{id:"_1-用途：-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-用途：-3"}},[t._v("#")]),t._v(" 1. 用途：")]),t._v(" "),n("ol",[n("li",[t._v("将获取到的属性，可以使用 kvc 来设置属性值。")]),t._v(" "),n("li",[t._v("运行时 字典转模型，设置属性值。")]),t._v(" "),n("li",[n("strong",[t._v("所有的字典转模型第三方框架的核心算法（通过运行时动态获取类的属性，通过 kvc 来设置属性值）！")])]),t._v(" "),n("li",[t._v("基本上都是这个思路， 但是 会复杂 比如 字典的嵌套等等。")])]),t._v(" "),n("h3",{attrs:{id:"_2-方法：-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-方法：-2"}},[t._v("#")]),t._v(" 2. 方法：")]),t._v(" "),n("div",{staticClass:"language-objectivec extra-class"},[n("pre",{pre:!0,attrs:{class:"language-objectivec"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n获取类的属性列表\n\n@return 属性列表数组\n*/")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSArray "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("lc_objProperties"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实现")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" kPropertiesListKey "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Properties"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSArray "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("lc_objProperties "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0. 从‘关联对象’中获取对象属性，如果有值，直接返回")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n方法: objc_getAssociatedObject： 获取关联对象 动态添加的属性\n\n参数:\n1. 对象\n2. 动态属性的 key\n\n返回值:\n- 动态添加的属性列表\n*/")]),t._v("\nNSArray "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptyList "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("objc_getAssociatedObject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" kPropertiesListKey"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ptyList "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" nil"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ptyList"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 调用运行时方法，获取类的属性")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n方法: class_copyXXXXList\n\n- Ivar : 成员变量\n- Method : 方法\n- Property : 属性\n- Protocol : 协议\n\n参数:\n- 要获取的类\n- 类属性的个数指针，用来保存 属性个数\n\n返回值:\n- 返回所有属性组成的数组, C语言中，数组的名称就是指向数组第一个元素的地址\n*/")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobjc_property_t "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("proList "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("class_copyPropertyList")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" class"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("count"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 遍历数组，获取属性名")]),t._v("\nNSMutableArray "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("properties "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSMutableArray array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" count"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1> 从数组中取出属性")]),t._v("\nobjc_property_t property "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" proList"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2> 从属性中取出属性名称 c语言字符串")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cName "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("property_getName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("property"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3> C字符串 转 OC 字符串")]),t._v("\nNSString "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSString stringWithCString"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("cName encoding"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSUTF8StringEncoding"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4> 添加到数组中")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("properties addObject"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. 释放数组")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("proList"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4. 利用关联对象 动态添加属性")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\nobjc_setAssociatedObject ：利用关联对象 动态添加属性\n\n参数\n1. 对象 self\n2. 动态添加属性的 key, 获取值的时候使用\n3. 动态添加的属性值\n4. 对象的引用关系\n*/")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("objc_setAssociatedObject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" kPropertiesListKey"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" properties"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("copy"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" OBJC_ASSOCIATION_RETAIN_NONATOMIC"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5. 返回数组")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" properties"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("copy"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取 person 类的属性列表")]),t._v("\nNSArray "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("properties "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Person lc_objProperties"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"%@"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" properties"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("br"),t._v(" "),n("h2",{attrs:{id:"四-交叉方法-method-swizzling"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四-交叉方法-method-swizzling"}},[t._v("#")]),t._v(" 四. 交叉方法 Method Swizzling")]),t._v(" "),n("h3",{attrs:{id:"_1-用途：-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-用途：-4"}},[t._v("#")]),t._v(" 1. 用途：")]),t._v(" "),n("ul",[n("li",[t._v("对系统方法或者第三方框架的方法不满意时，我们希望自己写一个方法。")]),t._v(" "),n("li",[t._v("利用交换方法，先执行 自己的方法 再执行系统或者第三方框架的方法。")]),t._v(" "),n("li",[t._v("AFN：交换了NSURLSession 的 resume 和 supsend两个系统方法， 当网络请求开始、网络请求挂起时， 发出通知，监听网络状态变化。")]),t._v(" "),n("li",[t._v("记住： 在迫不得已的时候再使用交换方法，否则不要使用。")])]),t._v(" "),n("h3",{attrs:{id:"_2-方法：-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-方法：-3"}},[t._v("#")]),t._v(" 2. 方法：")]),t._v(" "),n("ul",[n("li",[t._v("获取交换的实例方法： "),n("code",[t._v("class_getInstanceMethod([self class], @selector(viewWillAppear:));")])]),t._v(" "),n("li",[t._v("交换方法："),n("code",[t._v("method_exchangeImplementations(originalMethod, swizzledMethod);")])])]),t._v(" "),n("div",{staticClass:"language-objectivec extra-class"},[n("pre",{pre:!0,attrs:{class:"language-objectivec"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token expression"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("objc"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("runtime"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("h"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("UIViewController")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Tracking"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在每个类被装载到Runtime的时候调用该方法")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为方法交叉影响的是全局状态，+load中能保证在class 装载的时候进行交叉")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("load "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 保证只交叉一次")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" dispatch_once_t onceToken"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch_once")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("onceToken"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 交换实例方法")]),t._v("\nMethod originalMethod "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("class_getInstanceMethod")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" class"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@selector")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("viewWillAppear"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nMethod swizzledMethod "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("class_getInstanceMethod")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" class"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@selector")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lc_viewWillAppear"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 交换类方法时使用下面的:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Method originalMethod = class_getClassMethod(object_getClass((id)self), originalSelector);")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Method swizzledMethod = class_getClassMethod(object_getClass((id)self), swizzledSelector);")]),t._v("\n\nBOOL didAddMethod "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("class_addMethod")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" class"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@selector")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("viewWillAppear"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("method_getImplementation")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("swizzledMethod"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("method_getTypeEncoding")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("swizzledMethod"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("didAddMethod"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("class_replaceMethod")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" class"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@selector")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lc_viewWillAppear"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("method_getImplementation")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("originalMethod"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("method_getTypeEncoding")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("originalMethod"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 交换方法")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("method_exchangeImplementations")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("originalMethod"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" swizzledMethod"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("pragma")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token expression"}},[t._v("mark "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 实现自定义方法")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("lc_viewWillAppear"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BOOL"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("animated "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" lc_viewWillAppear"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("animated"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"viewWillAppear: %@"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n")])])]),n("h3",{attrs:{id:"_3-图解："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-图解："}},[t._v("#")]),t._v(" 3. 图解：")]),t._v(" "),n("p",[n("strong",[t._v("交叉之前执行的方法：")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(259),alt:""}})]),t._v(" "),n("p",[n("strong",[t._v("交叉之后的方法：")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(260),alt:""}})]),t._v(" "),n("h3",{attrs:{id:"_4-交叉后的runtime执行顺序："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-交叉后的runtime执行顺序："}},[t._v("#")]),t._v(" 4. 交叉后的Runtime执行顺序：")]),t._v(" "),n("ol",[n("li",[t._v("根据"),n("code",[t._v("@selector(viewWillAppear:)")]),t._v(" 找到自定义的 "),n("code",[t._v("lc_viewWillAppear")]),t._v(" 实现；")]),t._v(" "),n("li",[t._v("自定义的 "),n("code",[t._v("lc_viewWillAppear")]),t._v(" 实现，向 self 发送 "),n("code",[t._v("@selector(lc_viewWillAppear)")]),t._v(" ；")]),t._v(" "),n("li",[t._v("根据 "),n("code",[t._v("@selector(lc_viewWillAppear)")]),t._v(" ，找到默认的SDK中 "),n("code",[t._v("viewWillAppear")]),t._v("的实现；")]),t._v(" "),n("li",[t._v("执行默认SDK中 "),n("code",[t._v("viewWillAppear")]),t._v(" 代码;")]),t._v(" "),n("li",[t._v("执行"),n("code",[t._v('NSLog(@"viewWillAppear: %@", self);')])]),t._v(" "),n("li",[t._v("结束；")])]),t._v(" "),n("br"),t._v(" "),n("h2",{attrs:{id:"五-动态添加方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五-动态添加方法"}},[t._v("#")]),t._v(" 五. 动态添加方法")]),t._v(" "),n("h3",{attrs:{id:"_1-用途：-5"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-用途：-5"}},[t._v("#")]),t._v(" 1. 用途：")]),t._v(" "),n("ul",[n("li",[t._v("如果一个类方法非常多，加载类到内存的时候也比较耗费资源，需要给每个方法生成映射表，可以使用动态给某个类添加方法解决。")]),t._v(" "),n("li",[t._v("经典面试题：有没有使用 performSelector，其实主要想问你有没有动态添加过方法。")])]),t._v(" "),n("h3",{attrs:{id:"_2-方法：-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-方法：-4"}},[t._v("#")]),t._v(" 2. 方法：")]),t._v(" "),n("p",[n("strong",[t._v("1.动态添加：")])]),t._v(" "),n("div",{staticClass:"language-objectivec extra-class"},[n("pre",{pre:!0,attrs:{class:"language-objectivec"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 动态添加方法就不会报错")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p performSelector"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@selector")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("eat"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[n("strong",[t._v("2. 重写 resolveInstanceMethod 方法：")])]),t._v(" "),n("ul",[n("li",[t._v("当一个对象调用未实现的方法，会调用这个方法处理,并且会把对应的方法列表传过来。")]),t._v(" "),n("li",[t._v("刚好可以用来判断，未实现的方法是不是我们想要动态添加的方法")])]),t._v(" "),n("div",{staticClass:"language-objectivec extra-class"},[n("pre",{pre:!0,attrs:{class:"language-objectivec"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BOOL"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("resolveInstanceMethod"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SEL"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("sel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sel "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@selector")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("eat"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 动态添加eat方法")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("class_addMethod")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@selector")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("eat"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" eat"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"v@:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第一个参数：给哪个类添加方法")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第二个参数：添加方法的方法编号")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第三个参数：添加方法的函数实现（函数地址）")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第四个参数：函数的类型，(返回值+参数类型) v:void @:对象->self :表示SEL->_cmd")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" resolveInstanceMethod"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" sel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("br")])}),[],!1,null,null,null);s.default=e.exports}}]);