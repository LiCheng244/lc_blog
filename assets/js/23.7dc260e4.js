(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{201:function(_,t,v){"use strict";v.r(t);var c=v(6),o=Object(c.a)({},(function(){var _=this,t=_.$createElement,v=_._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("blockquote",[v("p",[v("strong",[_._v("引言:")]),_._v("\n正则表达式就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，用来表达对字符串的一种过滤逻辑。")]),_._v(" "),v("p",[_._v("通过正则表达式可以达到如下的目的：")]),_._v(" "),v("ol",[v("li",[_._v("给定的字符串是否符合正则表达式的过滤逻辑（称作“匹配”）；")]),_._v(" "),v("li",[_._v("可以通过正则表达式，从字符串中获取我们想要的特定部分。")])])]),_._v(" "),v("br"),_._v("\n### I. 匹配普通文本字符\n____\n"),v("p",[_._v("正则表达式可以只包含普通的文本，代表去精确匹配这个文本。例如:")]),_._v(" "),v("blockquote",[v("p",[_._v("正则表达式：song\n待匹配文本：xiaosongge，xiaoSongge\n匹配后结果：xiaosongge")])]),_._v(" "),v("p",[_._v('**分析：**正则表达式默认是区分大小写的，所以song不会匹配 "Song" 。但是大部分的正则表达式实现都提供了一个选项表示不区分大小写。')]),_._v(" "),v("br"),_._v("\n### II. 匹配任意字符\n____\n"),v("p",[v("code",[_._v(".")]),_._v("用来匹配一个任意字符，例如：")]),_._v(" "),v("blockquote",[v("p",[_._v("正则表达式：c.t\n待匹配文本：cat cet caaat dog\n匹配后结果：cat cet")])]),_._v(" "),v("p",[v("strong",[_._v("分析：")]),v("code",[_._v("c.t")]),_._v(' 会匹配以 "c" 开头，以 "t" 结尾，中间为任意字符的字符串。')]),_._v(" "),v("p",[_._v("同理，多个连续的.可以匹配多个连续的任意字符：")]),_._v(" "),v("blockquote",[v("p",[_._v("正则表达式：c..t\n待匹配文本：cat cet caat dog\n匹配后结果：caat")])]),_._v(" "),v("br"),_._v("\n### III. 匹配特殊字符\n____\n"),v("p",[v("code",[_._v(".")]),_._v("在正则表达式中含有特殊的意义，是一个特殊的字符。"),v("code",[_._v("\\")]),_._v('也是特殊字符，可以对特殊字符起到转义作用。如果你想匹配的是一个真正的 "." 字符，需要在 '),v("code",[_._v(".")]),_._v(" 前面加上 "),v("code",[_._v("\\")]),_._v(" 对字符进行转义。所以，"),v("code",[_._v("\\.")]),_._v(' 表示真正的 "." 字符。')]),_._v(" "),v("blockquote",[v("p",[_._v("正则表达式：c.t\n待匹配文本：cat c.t dog\n匹配后结果：c.t")])]),_._v(" "),v("p",[_._v("**注意：**因为"),v("code",[_._v("\\")]),_._v('也是特殊字符，所以想要匹配一个真正的 "" 字符，需要使用两个反斜线'),v("code",[_._v("\\\\")]),_._v("：")]),_._v(" "),v("blockquote",[v("p",[_._v("正则表达式：c\\\\t\n待匹配文本：cat c\\t dog\n匹配后结果：c\\t")])]),_._v(" "),v("br"),_._v("\n### IV. 使用字符集合\n____\n上面说到.能匹配一个任意字符，但是如果我想匹配几个特定字符怎么办？匹配一组特定的字符可以使用[和]元字符。\n"),v("blockquote",[v("p",[_._v("正则表达式：c[ab]t\n待匹配文本：cat cbt cet\n匹配后结果：cat cbt cet")])]),_._v(" "),v("p",[_._v("分析："),v("code",[_._v("[ab]")]),_._v('会匹配 "a" 或者 "b"。所以 '),v("code",[_._v("c[ab]t")]),_._v(' 会匹配 "cat" 和 "cbt" 而不会匹配 "cet"。')])])}),[],!1,null,null,null);t.default=o.exports}}]);