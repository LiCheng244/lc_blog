(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{328:function(t,a,s){"use strict";s.r(a);var n=s(6),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",[t._v("渲染性能优化指南")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("前言")]),t._v(" "),s("p",[t._v("本篇介绍在 CocosCreator 环境下，对游戏程序渲染性能方面各种手段的考察。")])]),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"一-什么是渲染性能？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一-什么是渲染性能？"}},[t._v("#")]),t._v(" 一. 什么是渲染性能？")]),t._v(" "),s("h3",{attrs:{id:"_1-帧率"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-帧率"}},[t._v("#")]),t._v(" 1.帧率:")]),t._v(" "),s("p",[t._v("是用户对程序的流畅程度比较直观的感受——如果游戏长时间处于一个低于设计帧率的状态，用户就会觉得“卡”。\n从开发者的角度看，帧率降低，是缘于程序的各种运算和操作消耗了过大的系统资源，导致程序必须花费超过“预想的一帧时间”去完成它的工作。\n所以一般来说，帧率不符合预期往往同时还伴随着设备发热，设备耗电加剧，设备内存占用过高导致崩溃等负面情况。")]),t._v(" "),s("p",[t._v("在一些应用场景中，"),s("strong",[t._v("游戏的帧率往往不仅受到绘制操作的影响。")]),t._v(" 其他方面的计算消耗，或者过大的内存占用，都会和帧率产生相互影响。")]),t._v(" "),s("h3",{attrs:{id:"_2-影响性能的情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-影响性能的情况"}},[t._v("#")]),t._v(" 2.影响性能的情况:")]),t._v(" "),s("p",[t._v("以下是cocos游戏程序应用场景中，可能对整体性能有负面影响的情况：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("图形绘制部分造成了过大的开销")]),t._v(" （比如最常见的就是Drawcalls 过高)；")]),t._v(" "),s("li",[s("strong",[t._v("非绘制部分的计算工作过于繁重")]),t._v(" （比如每帧都会进行的大型for循环，数值计算，以碰撞检测和过于繁重的物理引擎计算最为常见）；")]),t._v(" "),s("li",[s("strong",[t._v("过高的内存占用和帧率的相互影响")]),t._v("：")])]),t._v(" "),s("ol",[s("li",[t._v("在浏览器环境下（h5，也包括微信小游戏），系统的内存回收是在程序的空闲时间见缝插针地执行。而过高的系统开销会导致内存收回找不到这样的空闲时间——也就是说，帧率降低的同时可能还存在内存垃圾无法回收的情况；")])]),t._v(" "),s("p",[t._v("2） 因为自动垃圾回收机制的存在，过高的内存占用必然会导致内存回收耗费更长的时间。这个时间开销，也会反过来影响帧率。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("图形绘制")]),t._v(" "),s("p",[t._v("“渲染性能”这个概念，其实还包含其他诸多方面。但接下来的内容将只局限于其中的一个范畴，即，"),s("strong",[t._v("图形绘制对游戏程序帧率的影响")]),t._v(" 。也就是说，只讨论上述情况中的第一种。")])]),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"二-opengl-webgl-绘制命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二-opengl-webgl-绘制命令"}},[t._v("#")]),t._v(" 二. OpenGL/WebGL 绘制命令")]),t._v(" "),s("p",[s("strong",[t._v("我们目前的、以及将来较长一段时间的游戏项目，都将会采用"),s("a",{attrs:{href:"../00%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/OpenGL",title:"OpenGL或WebGL（简介）"}},[t._v("OpenGL或WebGL")]),t._v("的渲染方式。")])]),t._v(" "),s("p",[t._v("在代码层面，我们要完成一帧游戏画面的绘制，需要调用一系列的 "),s("strong",[t._v("GL绘制命令")]),t._v(" ，其基本操作如下：")]),t._v(" "),s("h3",{attrs:{id:"_1-清屏"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-清屏"}},[t._v("#")]),t._v(" 1. 清屏")]),t._v(" "),s("p",[t._v("将上一帧绘制的内容清空，一般如下：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("glClearColor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.2f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.3f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.3f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("glClear")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GL_COLOR_BUFFER_BIT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("接着，按照层级关系，依次对显示元素进行接下来的2,3,4,5步骤：")]),t._v(" "),s("h3",{attrs:{id:"_2-绑定纹理数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-绑定纹理数据"}},[t._v("#")]),t._v(" 2. 绑定纹理数据")]),t._v(" "),s("p",[t._v("首先是绑定纹理数据（亦称之为贴图，图片素材）：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("glActiveTexture")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GL_TEXTURE0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("glBindTexture")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GL_TEXTURE_2D"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" texture1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"_3-顶点数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-顶点数据"}},[t._v("#")]),t._v(" 3. 顶点数据")]),t._v(" "),s("p",[t._v("然后准备好顶点数据（包括顶点位置，索引，颜色），并绑定，比如：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" vertices"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// positions          // colors           // texture coords")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" indices"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// first triangle")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// second triangle")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" VBO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EBO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("glBindBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GL_ARRAY_BUFFER"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" VBO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("glBufferData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GL_ARRAY_BUFFER"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vertices"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vertices"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GL_STATIC_DRAW"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("glBindBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GL_ELEMENT_ARRAY_BUFFER"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EBO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("glBufferData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GL_ELEMENT_ARRAY_BUFFER"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("indices"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" indices"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GL_STATIC_DRAW"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// position attribute")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("glVertexAttribPointer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GL_FLOAT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GL_FALSE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("glEnableVertexAttribArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// color attribute")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("glVertexAttribPointer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GL_FLOAT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GL_FALSE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("glEnableVertexAttribArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// texture coord attribute")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("glVertexAttribPointer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GL_FLOAT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GL_FALSE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("glEnableVertexAttribArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"_4-shader的加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-shader的加载"}},[t._v("#")]),t._v(" 4. shader的加载")]),t._v(" "),s("p",[t._v("shader的加载，编译，使用：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//加载")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vertex shader 编译")]),t._v("\nvertex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("glCreateShader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GL_VERTEX_SHADER"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("glShaderSource")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vertex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("vShaderCode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("glCompileShader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vertex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fragment Shader编译")]),t._v("\nfragment "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("glCreateShader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GL_FRAGMENT_SHADER"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("glShaderSource")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fragment"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("fShaderCode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("glCompileShader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fragment"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建shader实例，并绑定")]),t._v("\nProgramID "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("glCreateProgram")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("glAttachShader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vertex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("glAttachShader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fragment"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("glLinkProgram")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//赋值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("glUniform1i")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//使用")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("glUseProgram")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ProgramID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"_5-绘制顶点命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-绘制顶点命令"}},[t._v("#")]),t._v(" 5. 绘制顶点命令")]),t._v(" "),s("p",[t._v("准备工作就绪，调用"),s("strong",[t._v("绘制顶点命令")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("glDrawElements")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//或者")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("glDrawArrays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"_6-完成渲染"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-完成渲染"}},[t._v("#")]),t._v(" 6. 完成渲染")]),t._v(" "),s("p",[t._v("对所有显示元素均进行步骤2，3，4，5，直到遍历完整个渲染列表。")]),t._v(" "),s("br"),t._v(" "),s("p",[s("strong",[t._v("去掉详细代码的部分，绘制步骤精简为：")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("ol",[s("li",[t._v("清屏。按层级关系依次对显示元素进行2,3,4,5步；")]),t._v(" "),s("li",[t._v("绑定纹理数据（亦称之为贴图，图片素材）；")]),t._v(" "),s("li",[t._v("准备顶点数据（包括顶点位置，索引，颜色），并绑定；")]),t._v(" "),s("li",[t._v("编译使用shader；")]),t._v(" "),s("li",[t._v("调用 "),s("strong",[t._v("绘制顶点命令")]),t._v(" "),s("code",[t._v("glDrawElements()")]),t._v("：")]),t._v(" "),s("li",[t._v("对所有显示元素均进行步骤2，3，4，5。直到遍历完整个渲染列表。")])])]),t._v(" "),s("p",[t._v("以上即为我们的游戏程序调用OpenGL API去完成图形绘制的过程。 这个过程导致的系统开销，根本上决定了程序的渲染性能。而对这个过程的优化处理，即是对渲染性能的优化。")]),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"三-drawcalls"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三-drawcalls"}},[t._v("#")]),t._v(" 三. DrawCalls")]),t._v(" "),s("h3",{attrs:{id:"_1-什么是drawcalls"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是drawcalls"}},[t._v("#")]),t._v(" 1. 什么是DrawCalls?")]),t._v(" "),s("p",[s("code",[t._v("Drawcall")]),t._v(" ，这个词可以从中文翻译的字面意思去理解：Draw Call——绘制调用。")]),t._v(" "),s("p",[t._v("从OpenGL/WebGL的API层面去看，可以狭义地和“对"),s("code",[t._v("glDrawElements()")]),t._v("或"),s("code",[t._v("glDrawArrays()")]),t._v("的调用”划等号。")]),t._v(" "),s("p",[t._v("实际上CocosCreator引擎的Drawcalls计数，就是对"),s("code",[t._v("glDrawElements()")]),t._v("调用的计数，也就是上面讲述的 "),s("strong",[t._v("绘制步骤的第5步")]),t._v(" 的执行计数。")]),t._v(" "),s("p",[t._v("故而，我们常说的“降低DrawCalls”，其实就是降低"),s("code",[t._v("glDrawElements()")]),t._v("的执行次数。")]),t._v(" "),s("h3",{attrs:{id:"_2-为什么要减少drawcalls"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-为什么要减少drawcalls"}},[t._v("#")]),t._v(" 2. 为什么要减少DrawCalls?")]),t._v(" "),s("p",[t._v("那么为什么通常减少了DrawCalls，渲染性能就能有所提升？ 或者说，为什么减少"),s("code",[t._v("glDrawElements()")]),t._v("的执行次数是有效的性能优化手段？")]),t._v(" "),s("p",[t._v("通过观察上面提到的GL绘制6大步骤，我们了解到：每次在我们调用"),s("code",[t._v("glDrawElements()")]),t._v("命令之前，都必须先进行 "),s("strong",[t._v("绑纹理-绑顶点-使用shader")]),t._v(" 这3项准备工作，唯有这样才能保证图形如我们预期地绘制出来。")]),t._v(" "),s("p",[t._v("在某一帧的绘制中，"),s("code",[t._v("glDrawElements()")]),t._v("执行次数变多，必然关系到前3项准备工作的次数也增多。事实上3项准备工作和"),s("code",[t._v("glDrawElements()")]),t._v("联合起来，同时对系统开销造成影响。")]),t._v(" "),s("p",[t._v("所以降低drawCalls的意义，不仅在于减少"),s("code",[t._v("glDrawElements()")]),t._v("本身，也意味着让 "),s("strong",[t._v("绑纹理-绑顶点-使用shader")]),t._v(" 步骤中所包含的诸多命令调用频次的减少。")]),t._v(" "),s("h3",{attrs:{id:"_3-是不是只要drawcalls减少了，帧率就一定会更稳定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-是不是只要drawcalls减少了，帧率就一定会更稳定"}},[t._v("#")]),t._v(" 3. 是不是只要DrawCalls减少了，帧率就一定会更稳定?")]),t._v(" "),s("p",[t._v("从以上分析，我们知道减少DrawCalls其实是为了减少"),s("strong",[t._v("绑纹理-绑顶点-使用shader-绘制顶点")]),t._v("这几个命令的调用。但如果这几个操作本身就有很高的系统开销，此时即便drawCalls很低，也一样得不到好的渲染表现。")]),t._v(" "),s("p",[t._v("下面是一些常见的除drawcalls之外导致帧率下降的因素:")]),t._v(" "),s("h4",{attrs:{id:"a-绘制过多的顶点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#a-绘制过多的顶点"}},[t._v("#")]),t._v(" A. 绘制过多的顶点:")]),t._v(" "),s("p",[t._v("这种情况在3D游戏中更普遍——为了更细致的表现效果，3D模型的顶点数往往会非常多。 而"),s("strong",[t._v("2D游戏在大部分情况下，一个Sprite只有4个顶点")]),t._v(" ，需要绘制的顶点数量通常比3D游戏更可控。")]),t._v(" "),s("p",[t._v("当然也有一些细节要注意："),s("strong",[t._v("九宫（SLICED）拉伸模式会让"),s("code",[t._v("Sprite")]),t._v("的顶点数变成16个，TILED拉伸模式会让顶点数量不固定的变多，这取决于Sprite尺寸和原始图片尺寸的比例。还有文本框，如果文本框是用单个文字的纹理拼接的，那么一段内容比较大的文本框也会让顶点数暴增。")])]),t._v(" "),s("h4",{attrs:{id:"b-用了算法复杂的-shader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#b-用了算法复杂的-shader"}},[t._v("#")]),t._v(" B. 用了算法复杂的 Shader:")]),t._v(" "),s("p",[t._v("比如在片元着色器中进行大型for循环和数值计算，这是非常考验设备性能的操作，表现效果在不同终端上往往会有非常大的差别。")]),t._v(" "),s("p",[t._v("这里还要提到顶点着色器和片元着色器的区别：")]),t._v(" "),s("p",[t._v("顶点着色器是对顶点进行逐一操作，而片元着色器是对光栅化后的像素进行逐一操作——通常情况下像素的数量是远多于顶点的。 比如对颜色进行相同的处理，（因为顶点的数量比像素少）用顶点着色器去完成会比片元着色器效率高得多，当然片元着色器能给出更好的表现效果（因为精确到像素）。这些问题是需要设计者权衡的。当然很多特效只能通过片元着色器才能完成，常见的比如Sprite模糊，Sprite描边。）")]),t._v(" "),s("h4",{attrs:{id:"c-绑定更多的纹理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#c-绑定更多的纹理"}},[t._v("#")]),t._v(" C. 绑定更多的纹理:")]),t._v(" "),s("p",[t._v("有一些特殊效果会需要我们绑定多个纹理给GPU，在 shader 中同时处理多个纹理数据。")]),t._v(" "),s("p",[t._v("OPENGL/WEBGL 默认可以同时在GPU绑定32个纹理数据，微信小游戏也支持同时绑定8个纹理数据。绑定和处理更多的纹理也会造成更多的系统开销。")]),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"四-批处理（合批）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四-批处理（合批）"}},[t._v("#")]),t._v(" 四. 批处理（合批）")]),t._v(" "),s("p",[t._v("众所周知，在电脑硬盘上进行文件移动操作，对于单独一个1G的文件 和 1024个1M的文件，前者通常会比后者更快完成。OpenGL渲染批处理的概念，可以考虑成与之类似的一种处理。")]),t._v(" "),s("h3",{attrs:{id:"_1-什么是批处理？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是批处理？"}},[t._v("#")]),t._v(" 1. 什么是批处理？")]),t._v(" "),s("p",[t._v("设想下面两种情况：")]),t._v(" "),s("h4",{attrs:{id:"a-一帧中，执行1000次以下步骤："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#a-一帧中，执行1000次以下步骤："}},[t._v("#")]),t._v(" A.一帧中，执行1000次以下步骤：")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("创建一个四边形的6个顶点（两个三角形），索引，颜色，并绑定；")])]),t._v(" "),s("li",[t._v("绑定纹理；")]),t._v(" "),s("li",[t._v("使用shader；")]),t._v(" "),s("li",[t._v("glDrawElements()；")])]),t._v(" "),s("h4",{attrs:{id:"b-一帧中，执行1次以下步骤："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#b-一帧中，执行1次以下步骤："}},[t._v("#")]),t._v(" B.一帧中，执行1次以下步骤：")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("创建一个1000个四边形的6000个顶点，索引，颜色，并绑定；")])]),t._v(" "),s("li",[t._v("绑定纹理；")]),t._v(" "),s("li",[t._v("使用shader；")]),t._v(" "),s("li",[t._v("glDrawElements()；")])]),t._v(" "),s("p",[t._v("两种做法最终都在一帧中完成了1000个四边形，6000个顶点的绘制。但B方法的2，3，4步仅仅只执行了一次，而A的2，3，4各执行了1000次。")]),t._v(" "),s("p",[s("strong",[t._v("其实B方法，就是我们所谓的“批处理”——把多个顶点放在“同一批”去绘制。")])]),t._v(" "),s("h3",{attrs:{id:"_2-图集为什么能做到批处理？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-图集为什么能做到批处理？"}},[t._v("#")]),t._v(" 2. 图集为什么能做到批处理？")]),t._v(" "),s("p",[t._v("通过上面的分析，我们知道，要让多个绘制合并到一个Drawcall, 要满足以下几个前提条件：")]),t._v(" "),s("ol",[s("li",[t._v("多个顶点同时绑定；")]),t._v(" "),s("li",[t._v("这批顶点使用同一个（或同一组）纹理数据；")]),t._v(" "),s("li",[t._v("这批顶点使用相同的shader及其他相同的绘制参数。")])]),t._v(" "),s("p",[t._v("考虑条件2，我们要"),s("strong",[t._v("保证绘制列表里的元素都使用同一份纹理数据")]),t._v(" ，而图集就是让我们达到这一点的手段。")]),t._v(" "),s("p",[s("strong",[t._v("那怎么让不同内容的Sprite使用图集上的不同部分呢？")])]),t._v(" "),s("p",[t._v("我们准备提交给GL的顶点数据中，不仅包括每个顶点的位置，索引，颜色，同时也会将一个“UV坐标”提交给GL，它指某个顶点在纹理中对应的像素位置。引擎会在shader中根据UV坐标，来确定渲染出来的像素对应图集中的哪一部分。")]),t._v(" "),s("p",[t._v("比如cocosCreator的默认shader，builtin-2d-sprite.effect：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    vec4 o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n    "),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("USE_TEXTURE")])]),t._v("\n    o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("texture")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("texture"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_uv0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//根据UV坐标确定像素值")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("CC_USE_ALPHA_ATLAS_TEXTURE")])]),t._v("\n      o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("texture2D")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("texture"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_uv0 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n \n    o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" v_color"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ALPHA_TEST")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n    gl_FragColor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("因为UV坐标是和其他顶点信息一起提交的，它只在每次绑定时被改变（被赋值），所以虽然渲染不同Sprite使用了不同的UV值，但不会造成drawCalls的增加。 合图就是用这种方式实现了不同内容的多个Sprite合批。")]),t._v(" "),s("p",[t._v("由此可知，我们对顶点分别设置不同的颜色，也不会造成drawCalls增加。比如在合批的前提下，进行 "),s("code",[t._v('nodeA.color = cc.Color("#ff0000")')]),t._v("这样的操作是不会导致drawCalls增加的。因为colorCreator引擎将色值作为顶点数据一起绑定。")]),t._v(" "),s("h3",{attrs:{id:"_3-什么情况会打断合批？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-什么情况会打断合批？"}},[t._v("#")]),t._v(" 3. 什么情况会打断合批？")]),t._v(" "),s("p",[t._v("我们已经知道如何利用图集实现批处理，但仅仅采用图集并不能保证多个视图元素drawCalls次数为1。OPENGL的绘制有几个步骤，但凡其中任一步骤发生变化，都会“打断合批”，导致drawCalls次数增加。")]),t._v(" "),s("p",[s("strong",[t._v("下面是一些常见的必定会打断合批的应用场景：")])]),t._v(" "),s("ul",[s("li",[t._v("Sprite 使用了不同的贴图文件（散图）；")]),t._v(" "),s("li",[t._v("用了 cc.Mask 遮罩（使用了不同的模板测试策略）；")]),t._v(" "),s("li",[t._v("多个 Sprite 运用了不同的混合模式 cc.Blend ；")]),t._v(" "),s("li",[t._v("多个 Sprite 运用了不同的 shader ；")]),t._v(" "),s("li",[t._v("多个 Sprite 运用了相同的 shader, 但使用了不同的 uniform 值；")]),t._v(" "),s("li",[t._v("渲染队列中有文本框“插队”，而这个文本框中的字符贴图并没有使用图集中的素材；")])]),t._v(" "),s("p",[s("strong",[t._v("下面的这些改变不会打断合批（在已经保证合批的前提下）：")])]),t._v(" "),s("ul",[s("li",[t._v("node.color, node.opacity的变化；")]),t._v(" "),s("li",[t._v("纹理拉伸策略的不同，SIMLE, SLICED, TILED；")]),t._v(" "),s("li",[t._v("Sprite SizeMode的不同，CUSTOM，TRIMMED；")]),t._v(" "),s("li",[t._v("顶点动画（简单的比如位移，scale,skew,rotate, 或者一些复杂的顶点动画效果，比如Spine的FFD(挤压，弯曲，变形)) ；")])]),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"五-creator合图的几种方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五-creator合图的几种方式"}},[t._v("#")]),t._v(" 五. Creator合图的几种方式")]),t._v(" "),s("p",[t._v("合图策略大致分为两种：静态合图和动态合图。")]),t._v(" "),s("p",[s("strong",[t._v("静态合图：")]),t._v("\n将散图拼接为图集文件。程序进行时加载图集文件的数据。图集是在程序启动前就已经准备好的。")]),t._v(" "),s("p",[s("strong",[t._v("动态合图：")]),t._v("\n不需要预先生成图集文件，程序资源包里只有散图。程序进行渲染的同时将已经渲染的内容进行拼接并缓存，下次再绘制相同内容时，多个sprite共同使用已经拼接过的缓存。")]),t._v(" "),s("p",[t._v("动态合图的优势在于：")]),t._v(" "),s("ol",[s("li",[t._v("可以将一些很难加入静态图集的内容也加入批处理（比如动态改变的汉字，静态合图无法做到包含所有汉字）；")]),t._v(" "),s("li",[t._v("随时选择哪些素材是真正需要绑定到GPU的（比如战斗场景中只需要战斗相关的资源）。 当然，随之而来的内存管理工作也会更加复杂，对于一些短暂出现的内容（比如一个战斗场景中的汉字，特效。战斗结束之后就用不到了）要做到及时回收，以防内存泄漏。")])]),t._v(" "),s("p",[t._v("一个对性能要求很高的2D游戏项目，往往需要静态合图和动态合图两者配合，才能达到最大程度的性能优化。")]),t._v(" "),s("h3",{attrs:{id:"_1-textruepacker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-textruepacker"}},[t._v("#")]),t._v(" 1. TextruePacker")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.codeandweb.com/texturepacker",title:"官网",target:"_blank",rel:"noopener noreferrer"}},[t._v("官网"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("老牌商业合图工具。进行静态合图的生成。可惜是收费软件，并且按年付费。")]),t._v(" "),s("p",[s("strong",[t._v("优点：")])]),t._v(" "),s("p",[t._v("图集在开发环境下已经生成好，可以在开发环境就能看出合批的实际效果。也能预先了解图集的尺寸，占用空间等信息。")]),t._v(" "),s("p",[s("strong",[t._v("缺点：")])]),t._v(" "),s("ol",[s("li",[s("s",[t._v("打出的合图再在某些情况下会有Sprite黑边问题。")]),t._v(" "),s("a",{attrs:{href:"client_guide-1c2kcar5ccbmo",title:"TexturePacker 黑边问题解决"}},[t._v("已有解决方案，只是需要修改Sprite的默认混合模式")]),t._v("。")]),t._v(" "),s("li",[t._v("要花钱。")])]),t._v(" "),s("h3",{attrs:{id:"_2-creator-ide合图功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-creator-ide合图功能"}},[t._v("#")]),t._v(" 2. Creator IDE合图功能")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://docs.cocos.com/creator/manual/zh/asset-workflow/auto-atlas.html",title:"cocos官方介绍",target:"_blank",rel:"noopener noreferrer"}},[t._v("cocos官方介绍"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("静态合图。在build时，将一个资源目录下的散图合并为图集。可以避免TextruePacker的黑边问题。")]),t._v(" "),s("p",[s("strong",[t._v("优点：")])]),t._v(" "),s("p",[t._v("IDE内解决问题，避免TextruePacker的黑边问题。")]),t._v(" "),s("p",[s("strong",[t._v("缺点：")])]),t._v(" "),s("p",[t._v("build才会生成合图，所以开发环境下还是用散图渲染，不能直观看到实际drawCalls情况。对于图片超出尺寸限制等问题无法预先判断。")]),t._v(" "),s("h3",{attrs:{id:"_3-creator-2-1-后的动态合图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-creator-2-1-后的动态合图"}},[t._v("#")]),t._v(" 3. Creator 2.1 后的动态合图")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://docs.cocos.com/creator/manual/zh/advanced-topics/dynamic-atlas.html",title:"cocos官方介绍",target:"_blank",rel:"noopener noreferrer"}},[t._v("cocos官方介绍"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("虽然上文提到动态合图是对合批进行精确控制的手段。 但是到现在版本为止（creator2.3.3)，creator的动态合图恰恰没有精确控制的功能。它只是将所有低于某个尺寸限制的纹理都自动合并，并不给开发者提供诸如“这张散图不需要合批”，“区分动态图集A，动态图集B”，“清理动态图集A，保留动态图集B”这样的功能。 还有一个大问题是，动态合图还没有提供原生方面的支持，也就是它只在web环境下有效。 要完善上面的这些问题，开发者需要等待后续的版本，或者自己动手对引擎做一系列修改。总之，CocosCreator目前的动态合图，还是一个比较粗糙的东西，只适用试验或者一些图片资源非常有限，复杂度很低的项目。")]),t._v(" "),s("p",[s("strong",[t._v("注:")])]),t._v(" "),s("p",[t._v("cocosCreator 2.1 后，引擎默认开启自动合图，想要单纯采取静态合图策略，需要关闭自动合图开关"),s("code",[t._v("cc.dynamicAtlasManager.enabled = false;")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"_4-方式比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-方式比较"}},[t._v("#")]),t._v(" 4. 方式比较")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}}),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("TexturePacker")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("Creator自动图集")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("Creator动态合图")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("免费")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("NO")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("YES")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("YES")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("黑边问题")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("YES")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("NO")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("NO")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("合批效果即时预览")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("YES")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("NO")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("YES")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("精确控制")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("YES")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("YES")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("NO")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("兼容动态文字")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("NO")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("NO")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("YES")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("浏览器版本")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("支持")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("支持")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("支持")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("原生版本")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("支持")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("支持")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("不支持")])])])]),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"六-文本框的处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六-文本框的处理"}},[t._v("#")]),t._v(" 六. 文本框的处理")]),t._v(" "),s("h3",{attrs:{id:"_1-艺术字体文本框"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-艺术字体文本框"}},[t._v("#")]),t._v(" 1.艺术字体文本框")]),t._v(" "),s("p",[s("strong",[t._v("对于不会有变化的汉字:")]),t._v(" 英文艺术字文本（比如按钮上的“确定”艺术文本），合理的做法是将整个文本框内容置于图集；")]),t._v(" "),s("p",[s("strong",[t._v("对于经常变化的:")]),t._v(" 英文&数字的艺术字文本（比如计分文本框），我们以前的做法往往是将其用BmpFont做成艺术字导入到项目，然后绑定到cc.Label。\n但是BmpFont的纹理必然独立于全局的静态图集之外，这就造成了DrawCalls的增加。\n为了优化DrawCalls，更好的做法是将这些艺术字贴图合并到全局静态图集，显示上用cc.Layout（自动排列容器）和cc.Sprite代替cc.Label（这个做法在 《头号枪手》，《最强消方块》，《快来消星星》中已经实践）。")]),t._v(" "),s("h3",{attrs:{id:"_2-非艺术字体文本框"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-非艺术字体文本框"}},[t._v("#")]),t._v(" 2. 非艺术字体文本框")]),t._v(" "),s("p",[t._v("cocosCreator 2.x 后， 引擎对非位图字体的cc.Label渲染方式有了更精确的划分，以此来解决文本框在不同应用场景下的效率问题。这就是 cc.Label 的 CacheMode 。")]),t._v(" "),s("p",[t._v("详见，"),s("a",{attrs:{href:"http://docs.cocos.com/creator/manual/zh/components/label.html",title:"cc.Label",target:"_blank",rel:"noopener noreferrer"}},[t._v("cc.Label组件参考"),s("OutboundLink")],1),t._v("\n及"),s("a",{attrs:{href:"http://docs.cocos.com/creator/manual/zh/advanced-topics/ui-auto-batch.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("UI 渲染批次合并指南"),s("OutboundLink")],1)]),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"七-层级管理以及粒子，spine，cc-graphics"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#七-层级管理以及粒子，spine，cc-graphics"}},[t._v("#")]),t._v(" 七. 层级管理以及粒子，Spine，cc.Graphics")]),t._v(" "),s("h3",{attrs:{id:"_1-层级管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-层级管理"}},[t._v("#")]),t._v(" 1. 层级管理")]),t._v(" "),s("p",[t._v("为了最大化发挥合批的优势，层级管理也是不得不考虑的一个问题。")]),t._v(" "),s("p",[t._v("为了保证绘制结果的正确性，提交给GL的顶点数据的组织，一般都会按照显示元素的层级依次添加。所以，让能够参与合批的视图元素在层级上尽量挨在一起，就能保证drawCalls尽量小。按照这个思路，我们可以考虑以下手段来进行层级优化：")]),t._v(" "),s("h4",{attrs:{id:"a-外部跟随"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#a-外部跟随"}},[t._v("#")]),t._v(" A 外部跟随:")]),t._v(" "),s("p",[t._v("用例：要在一个移动的 moveingSprite 上添加一个Spine子节点，Spine的贴图无法参与合批，通常这会导致合批被打断。")]),t._v(" "),s("p",[t._v("更好的办法：Spine子节点添加到整个舞台的最高层级，这样Spine就不是 moveingSprite 的子节点，不会打断底层元素的合批。 而在Spine节点的"),s("code",[t._v("upadate()")]),t._v("方法中，根据 moveingSprite 的位置变化自身位置。")]),t._v(" "),s("h4",{attrs:{id:"节点二次添加"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#节点二次添加"}},[t._v("#")]),t._v(" 节点二次添加:")]),t._v(" "),s("p",[t._v("用例：prefab UI 文件中，若干个 spriteButton 上都包含了一些文本框 cc.Label 子节点，这些 cc.Label 会打断 spriteButton 和其他元素的合批。")]),t._v(" "),s("p",[t._v("处理方法：重排UI层级。先遍历所有UI节点，将不能参与合批的子节点找出来，记录它们的全局坐标。重设这些子节点的 parent 或者 removeSelf 后再 addChild 它们，将它们添加到UI的最上层，并根据全局坐标重设位置。这样能参与合批的元素drawCalls将为1。")]),t._v(" "),s("h3",{attrs:{id:"_2-粒子和spine"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-粒子和spine"}},[t._v("#")]),t._v(" 2. 粒子和Spine")]),t._v(" "),s("p",[t._v("粒子和Spine动画，往往会使用不属于全局图集的纹理。要注意将他们的层级和其他参与合批的内容分离。")]),t._v(" "),s("h3",{attrs:{id:"_3-cc-graphics"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-cc-graphics"}},[t._v("#")]),t._v(" 3. cc.Graphics")]),t._v(" "),s("p",[t._v("cc.Graphics 直接调用GL的图形绘制API。 他也是无法参与全局合批的元素。 不仅如此，因为引擎的问题（直到2.3.3依然存在），即便是相同颜色的cc.Graphics节点，cocos都无法做到合批（理论上可以做到）。所以在引擎解决整个问题之前，项目要尽量避免 cc.Graphics 的使用。或者对引擎底层做修改，让 cc.Graphics 之间能够合批。")]),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"八-压缩纹理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#八-压缩纹理"}},[t._v("#")]),t._v(" 八. 压缩纹理")]),t._v(" "),s("p",[t._v("绑定压缩纹理是 OpenGL/WebGL 自身支持的一个特性。")]),t._v(" "),s("p",[t._v("压缩纹理的使用并不会减少drawCalls, 甚至压缩纹理的 shader 比默认的非压缩纹理 shader 还稍微复杂那么一点点：")]),t._v(" "),s("p",[t._v("注意 builtin-2d-sprite.effect：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    vec4 o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n    "),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("USE_TEXTURE")])]),t._v("\n    o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("texture")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("texture"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_uv0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n      "),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("CC_USE_ALPHA_ATLAS_TEXTURE ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果是 etc 1.0 这样的压缩纹理，要对透明通道做特殊处理")])]),t._v("\n      o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("texture2D")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("texture"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_uv0 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n \n    o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" v_color"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ALPHA_TEST")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n    gl_FragColor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("压缩纹理的主要作用是降低程序的内存占用。比如使用etc 1.0，可以让纹理占用的内存空间压缩到原来的 1/3。")]),t._v(" "),s("p",[t._v("所以，“压缩纹理” 其实不太符合“渲染性能优化”这个话题，它对渲染性能的影响是间接的（通过内存的优化）。只是本篇已经做了不少关于纹理资源的讨论，压缩纹理作为这方面的课题也应该带一下。")]),t._v(" "),s("p",[s("a",{attrs:{href:"http://docs.cocos.com/creator/manual/zh/asset-workflow/compress-texture.html?h=%E5%8E%8B%E7%BC%A9",title:"Cocos官方压缩纹理介绍",target:"_blank",rel:"noopener noreferrer"}},[t._v("Cocos官方压缩纹理介绍"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("cocosCreator 2.x 可以做到在项目在构建时针对不同的平台，不同的图片文件，生成不同格式的压缩纹理。这个功能大大简化了开发者自己去部署多平台压缩纹理的工作。")]),t._v(" "),s("p",[t._v("虽然压缩纹理对图片的质量是有影响的（有损压缩），但是鉴于其部署的方式非常灵活。我们可以最大程度的发挥压缩纹理的优势。 （比如，对于静止的，精细度要求很高的贴图不压缩， 而对于一闪而过的帧动画特效，粒子，精度要求不高的贴图，运用压缩纹理策略。）")]),t._v(" "),s("br")])}),[],!1,null,null,null);a.default=e.exports}}]);