(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{261:function(t,a,_){t.exports=_.p+"assets/img/20082405.2884c7c3.png"},262:function(t,a,_){t.exports=_.p+"assets/img/20082406.25dae4e5.png"},263:function(t,a,_){t.exports=_.p+"assets/img/20082407.3b1a99e6.png"},264:function(t,a,_){t.exports=_.p+"assets/img/20082408.ec0a1f13.png"},265:function(t,a,_){t.exports=_.p+"assets/img/20082409.da806d60.png"},266:function(t,a,_){t.exports=_.p+"assets/img/20082410.cdb15d86.png"},267:function(t,a,_){t.exports=_.p+"assets/img/20082411.2124f77c.png"},521:function(t,a,_){"use strict";_.r(a);var e=_(6),v=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",[t._v("CoreData 的使用")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("简介:")]),t._v(" "),e("ol",[e("li",[t._v("CoreData 是数据持久化存储的最佳方式.")]),t._v(" "),e("li",[t._v("CoreData 是基于 sqlite 的封装, 数据保存到一个数据库文件中(表).")]),t._v(" "),e("li",[t._v("iOS5 以后才出现.")]),t._v(" "),e("li",[t._v("它提供了对象-关系映射(ORM)的功能, 既能够将oc对象转化成数据保存在sqlite文件中, 也能将保存在数据库中的数据还原成oc对象.")]),t._v(" "),e("li",[t._v("数据操作期间, 我们不需要编写任何的sql语句.")]),t._v(" "),e("li",[t._v("数据最终的存储类型可以是：SQLite数据库，XML，二进制，内存里，或自定义数据类型.")])]),t._v(" "),e("p",[t._v("好处：能够合理管理内存,避免使用sql的麻烦, 更高效. 不需要我们手动去创建model类, 可以通过一些操作, 制动生成.")])]),t._v(" "),e("br"),t._v(" "),e("h2",{attrs:{id:"一-工作原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-工作原理"}},[t._v("#")]),t._v(" 一. 工作原理")]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("NSManagedObjectContext")]),t._v(" 临时数据库 向__NSPersistentStoreCoordinator__ 持久化存储助理 发送一个key(model名字)")]),t._v(" "),e("li",[e("strong",[t._v("NSPersistentStoreCoordinator")]),t._v(" 通过这个key 在 "),e("strong",[t._v("NSManagedObjectModel")]),t._v(" 数据模型中 找到这个model 对应的 表")]),t._v(" "),e("li",[e("strong",[t._v("NSManagedObjectModel")]),t._v(" 将这个表名  返回给 "),e("strong",[t._v("NSPersistentStoreCoordinator")])]),t._v(" "),e("li",[e("strong",[t._v("NSPersistentStoreCoordinator")]),t._v(" 通过 表名 找到 给表的 file 路径")]),t._v(" "),e("li",[e("strong",[t._v("NSPersistentStoreCoordinator")]),t._v(" 将这个路径 返回给 "),e("strong",[t._v("NSManagedObjectContext")])]),t._v(" "),e("li",[e("strong",[t._v("NSManagedObjectContext")]),t._v(" 对 数据进行 处理(增, 删 , 该, 查)")]),t._v(" "),e("li",[e("strong",[t._v("NSManagedObjectContext")]),t._v(" 保存数据 save")])]),t._v(" "),e("br"),t._v(" "),e("h2",{attrs:{id:"二-使用步骤"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-使用步骤"}},[t._v("#")]),t._v(" 二. 使用步骤")]),t._v(" "),e("h3",{attrs:{id:"创建模型文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建模型文件"}},[t._v("#")]),t._v(" 创建模型文件:")]),t._v(" "),e("p",[t._v("一个模型文件相当于一个数据库.")]),t._v(" "),e("p",[e("img",{attrs:{src:_(261),alt:""}})]),t._v(" "),e("h3",{attrs:{id:"添加实体"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#添加实体"}},[t._v("#")]),t._v(" 添加实体:")]),t._v(" "),e("p",[e("em",[t._v("一个实体相当于一个表.(点击下面add entity 添加表, 点击atttibutes的+号 添加属性)")])]),t._v(" "),e("p",[e("img",{attrs:{src:_(262),alt:""}})]),t._v(" "),e("h3",{attrs:{id:"创建实体类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建实体类"}},[t._v("#")]),t._v(" 创建实体类:")]),t._v(" "),e("p",[t._v("相当于模型类model.")]),t._v(" "),e("p",[e("img",{attrs:{src:_(263),alt:""}})]),t._v(" "),e("h3",{attrs:{id:"生成上下文"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生成上下文"}},[t._v("#")]),t._v(" 生成上下文:")]),t._v(" "),e("p",[t._v("生成上下文,来关联模型文件生成数据库: 生成上下文时, 如果有多个数据库,且生成多个数据库文件时, 要使用不同的上下文进行操作.")]),t._v(" "),e("h3",{attrs:{id:"从数据库查询对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从数据库查询对象"}},[t._v("#")]),t._v(" 从数据库查询对象:")]),t._v(" "),e("p",[t._v("过滤查询, 排序查询, 分组查询等等")]),t._v(" "),e("h3",{attrs:{id:"更新数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更新数据"}},[t._v("#")]),t._v(" 更新数据:")]),t._v(" "),e("p",[t._v("前提: 先查询, 再修改数据")]),t._v(" "),e("h3",{attrs:{id:"删除数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除数据"}},[t._v("#")]),t._v(" 删除数据:")]),t._v(" "),e("p",[t._v("前提: 先查询, 再删除数据")]),t._v(" "),e("h3",{attrs:{id:"多表关联"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多表关联"}},[t._v("#")]),t._v(" 多表关联:")]),t._v(" "),e("p",[t._v("在relationships添加与其他表的关联")]),t._v(" "),e("p",[t._v("注意: 添加完关联后, 该表的实体类要删除重新生成")]),t._v(" "),e("p",[e("img",{attrs:{src:_(264),alt:""}})]),t._v(" "),e("h3",{attrs:{id:"多个数据库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多个数据库"}},[t._v("#")]),t._v(" 多个数据库:")]),t._v(" "),e("p",[t._v("生成上下文时, 如果有多个数据库,且生成多个数据库文件时, 要使用不同的上下文进行操作.")]),t._v(" "),e("br"),t._v(" "),e("h2",{attrs:{id:"三-构成"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-构成"}},[t._v("#")]),t._v(" 三. 构成")]),t._v(" "),e("p",[t._v("(1)"),e("code",[t._v("NSManagedObjectContext")]),t._v("（被管理的数据上下文）")]),t._v(" "),e("p",[t._v("操作实际内容（操作持久层） 临时数据库\n作用：插入数据，查询数据，删除数据")]),t._v(" "),e("p",[t._v("(2)"),e("code",[t._v("NSManagedObjectModel")]),t._v("（被管理的数据模型）")]),t._v(" "),e("p",[t._v("数据库所有表格或数据结构，包含各实体的定义信息    数据模型\n作用：添加实体的属性，建立属性之间的关系\n操作方法：视图编辑器，或代码")]),t._v(" "),e("p",[t._v("(3)"),e("code",[t._v("NSPersistentStoreCoordinator")]),t._v("（持久化存储助理）")]),t._v(" "),e("p",[t._v("相当于数据库的连接器\n作用：设置数据存储的名字，位置，存储方式，和存储时机")]),t._v(" "),e("p",[t._v("(4)"),e("code",[t._v("NSManagedObject")]),t._v("（被管理的数据记录）")]),t._v(" "),e("p",[t._v("相当于数据库中的表格记录")]),t._v(" "),e("p",[t._v("(5)"),e("code",[t._v("NSFetchRequest")]),t._v("（获取数据的请求）")]),t._v(" "),e("p",[t._v("相当于查询语句  查询时 要建立请求对象")]),t._v(" "),e("p",[t._v("(6)"),e("code",[t._v("NSEntityDescription")]),t._v("（实体结构）")]),t._v(" "),e("p",[t._v("相当于表格结构")]),t._v(" "),e("p",[t._v("(7)后缀为.xcdatamodeld的包")]),t._v(" "),e("p",[t._v("里面是.xcdatamodel文件，用数据模型编辑器编辑 . 编译后为.momd或.mom文件")]),t._v(" "),e("br"),t._v(" "),e("h2",{attrs:{id:"四-sqlitemanager工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四-sqlitemanager工具"}},[t._v("#")]),t._v(" 四. SQLiteManager工具")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("Z_PK")]),t._v(" : 主键 "),e("code",[t._v("ZDEPART")]),t._v(": 外键")])]),t._v(" "),e("p",[e("img",{attrs:{src:_(265),alt:""}})]),t._v(" "),e("ul",[e("li",[t._v("打开CoreData的sql语句:")])]),t._v(" "),e("p",[t._v("按照下图操作后, 使用CoreData时 会在控制台输出sql语句:")]),t._v(" "),e("p",[e("img",{attrs:{src:_(266),alt:""}})]),t._v(" "),e("p",[t._v("添加-com.apple.CoreData.SQLDebug 和 1 两行\n注意: 这两行的顺序如图所示, 不能调换.")]),t._v(" "),e("p",[e("img",{attrs:{src:_(267),alt:""}})]),t._v(" "),e("br"),t._v(" "),e("h2",{attrs:{id:"五-sqlite-和-coredata-的对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五-sqlite-和-coredata-的对比"}},[t._v("#")]),t._v(" 五. SQLite 和 CoreData 的对比")]),t._v(" "),e("blockquote",[e("ol",[e("li",[t._v("sqlite是纯C语言存储方式.")]),t._v(" "),e("li",[t._v("CoreData是对sqlite的封装, 它的数据的保存直接使用对象, 不用再写sql语句.")]),t._v(" "),e("li",[t._v("性能方面: sqlite 优于 CoreData")]),t._v(" "),e("li",[t._v("什么时候使用sqlite 和 CoreData?\n* 如果数据库表关联比较复杂时, 三四张表都关联, 那就使用sqlite\n* 如果数据库表结构比较简单, 表之间没有关系, 使用CoreData")])])])])}),[],!1,null,null,null);a.default=v.exports}}]);